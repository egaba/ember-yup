
<div class="container">
  <div class="lg:w-4/5 lg:mx-auto">
    <h1>using components</h1>
    <CodeDemo2
      @key="model-mixin"
      @activeTab="example1"
      @example1={{modelExample}} @label1="model"
      @example2={{templateExample}} @label2="template"
      @example3={{actionsExample}} @label3="actions"
    >
      <form {{action "validate" on="submit"}}>
        <header>
          <h2>Form name</h2>
        </header>

        <p class="my-6"><a class="cursor-pointer inline-block" {{action "generateFakeData"}}>Generate fake data</a></p>
        {{#if isValid}}
          <section class="mt-6 mb-8">
            <WiredCard @class="w-block w-full bg-green-lighter py-4 px-2">
              <p class="mb-0">valid</p>
            </WiredCard>
          </section>
        {{else if didAttemptValidate}}
          <section class="mt-6 mb-8">
            <WiredCard @class="w-block w-full bg-red-lighter py-4 px-2">
              <p class="mb-0">invalid. {{model.errors.messages.length}} error(s)</p>
            </WiredCard>
          </section>
        {{/if}}

        <div class="row">
          {{#each-in model.schema.fields as |name|}}
            <div class="col-xs-12 col-sm-6 mb-4">
              <div class="flex">
                <label for="{{name}}-input" class="w-2/5">{{name}}</label>
                <div class="w-3/5">
                  <WiredInput @id="{{name}}-input" @class="block w-full" @input={{action (mut (get model name)) value="target.value"}} @value={{get model name}}/>
                </div>
              </div>
              {{#each (get model.errors name) as |error|}}
                <p class="text-sm text-red-dark mb-0">{{error.message}}</p>
              {{/each}}
            </div>
          {{/each-in}}
        </div>

        <footer class="mt-10">
          <div class="text-right">
            <WiredButton @class="bg-green-light">
              <button type="submit" class="px-5 py-3 font-semibold uppercase  text-green-darker">validate</button>
            </WiredButton>
          </div>
        </footer>
      </form>
    </CodeDemo2>
  </div>
</div>

<!-- <div class="flex pb-20">
  <div class="pr-8">
    <section>
      <h1>Form Components</h1>
      <p>
        This library provides <code class="snippet">FormField</code> components that wrap data schemas.
        <code class="snippet">FormField</code>s can operate both standalone or in combination with
        other form fields within a <code class="snippet">ValidationForm</code> to create a data object.
      </p>
    </section>
    <section>
      <h2 id="basics">Displaying messages</h2>
      <p>
        Fields aggregate error messages in an <code class="snippet">errorMessages</code> array
        that is passed down with the field.
      </p>
      {{markdown-to-html formFieldBasicsSnippet class="codeblock"}}
      <p>
        When form fields initialize, they will validate but won't display error messages until their value first changes.
        To show error messages on init, set <code class="snippet">showErrorMessages=true</code>.
        Otherwise, <code class="snippet">showErrorMessages</code> will be set to
        <code class="snippet">true</code> after it detects its first
        <code class="snippet">value</code> change.
      </p>
    </section>
    <section>
      <h2 id="customize-messages">Customize validation messages</h2>
      <p class="mb-10">
        To override default validation messages, set message keys on the <code class="snippet">validationMessages</code>
        prop as a hash. Every option maps to a message in this hash.
      </p>
      {{#code-demo markup=overrideMessagesSnippet}}
        {{#text-field
          required=true
          type="email"
          value=customMessagesValue
          validationMessages=(hash
            email="❌ this is an invalid email"
            required="❌ this field is required"
          )
          as |field|
        }}
          <wired-input
            placeholder="Email address"
            type="text"
            value={{customMessagesValue}}
            oninput={{action (mut customMessagesValue) value="target.value"}}
          ></wired-input>
          {{#each field.errorMessages as |error|}}
            <p class="text-red">{{error}}</p>
          {{/each}}
        {{/text-field}}
      {{/code-demo}}
      <p>Default text field validation messages:</p>
      {{markdown-to-html textValidationMessages class="codeblock"}}
      <p>Default number field validation messages:</p>
      {{markdown-to-html numberValidationMessages class="codeblock"}}
      <p>Default date field validation messages:</p>
      {{markdown-to-html dateValidationMessages class="codeblock"}}
      <p>Default boolean field validation messages:</p>
      {{markdown-to-html boolValidationMessages class="codeblock"}}
    </section>

    <section>
      <h2 id="transforming-data">Transforming data</h2>
      <p>Say you want your controls to set numeric values instead of strings. If you want Yup to cast your data, you'll need to do two things:</p>
      <ol class="mb-4">
        <li>Add an <code class="snippet">onChange</code> action on the form field component to mutate the field's value.</li>
        <li>Mutate <code class="snippet">field.value</code> on the control instead of the original value.</li>
      </ol>
      <p><strong>Transform example:</strong></p>
      {{markdown-to-html afterTransformExample class="codeblock"}}
      {{markdown-to-html afterTransformConsole class="codeblock"}}
    </section>

    <section>
      <h2 id="behind-the-scenes">Behind the scenes</h2>
      <p>
        A <code class="snippet">FormField</code> uses observers and computed properties for validating its
        <code class="snippet">value</code>. When the field initializes, the field validates
        and stores the result in its <code class="snippet">validation</code> property.
        This <code class="snippet">validation</code> will refresh itself whenever the
        <code class="snippet">value</code> changes. Every <code class="snippet">FormField</code>
        has a <code class="snippet">dataSchema</code> that it uses to validate against
        its <code class="snippet">value</code>.
      </p>
      <p>
        As the fields <code class="snippet">value</code> updates, <code class="snippet">readValidation</code>
        is invoked, <code class="snippet">validation</code> gets re-computed, the result
        populates or clears <code class="snippet">errors</code>, then messages are proxied
        to <code class="snippet">errorMessages</code>. Optionally, <code class="snippet">onChange</code>
        method is invoked with the fields latest value, if the handler is defined.
      </p>
      <p>
        When fields are used within a <code class="snippet">ValidationForm</code>,
        the data will collect into an object collected by the form, keyed by the fields
        <code class="snippet">name</code> property. During the form's submission process,
        the form will enable all of its fields and collect their validations,
        re-validating only when needed. Fields can each be thought of as single validation
        promises, where the form is a hashed collection of these promises. These promises
        are collected and sent to the form's <code class="snippet">onSubmit</code> handler.
      </p>
      <p>
        Additionally, if the form is sync, the form will wait until its fields' validations are complete then
        either invoke <code class="snippet">onSuccess</code> or <code class="snippet">onReject</code>,
        accordingly.
      </p>
    </section>
  </div>
  {{#fixed-nav class="w-1/5 page-side-nav"}}
    <a href="#basics">Enabling fields and displaying messages</a>
    <a href="#customize-messages">Customize validation messages</a>
    <a href="#transforming-data">Transforming data</a>
    <a href="#behind-the-scenes">Behind the scenes</a>
  {{/fixed-nav}}
</div> -->
