{"boolean-field":[{"description":"This component wraps `Yup.bool()` and validates boolean values.","tags":[{"title":"class","description":null,"type":null,"name":"BooleanField"}]},{"description":"The value of the field.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"value"}]},{"description":"The primary schema that determines the fields validity.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"dataSchema"},{"title":"private","description":null}]}],"date-field":[{"description":"This component wraps `Yup.date()` and validates date values.","tags":[{"title":"class","description":null,"type":null,"name":"DateField"}]},{"description":"The value of the field.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Date"},"name":"value"}]},{"description":"These are the default validation messages set by the Ember Yup library.\nLeave the properties `undefined` to allow defaults to be set by Yup.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"defaultValidationMessages"},{"title":"private","description":null}]},{"description":"The minimum date allowed for the field's `value`.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Date"},"name":"min"}]},{"description":"The maximum date allowed for the field's `value`.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Date"},"name":"max"}]},{"description":"The primary schema that determines the fields validity.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"dataSchema"},{"title":"private","description":null}]}],"form-field":[{"description":"The base component for FormField components. FormFields are responsible for\nproviding the schema for validating the fields `value`. This base component\nis responsible for reading the schema for validation and setting up the fields\nstate, such as errors. This component also registers with its parent, if part\nof a ValidationForm.","tags":[{"title":"class","description":null,"type":null,"name":"FormField"}]},{"description":"Control whether or not validation occurs on the field.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"disabled"},{"title":"defaultValue","description":"true"}]},{"description":"Properties that are yielded to the template.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"state"},{"title":"private","description":null}]},{"description":"Field-specific properties that are yielded to the template. Can be overridden\nby the inheriting FormField component.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"additionalState"},{"title":"private","description":null}]},{"description":"Base field properties that are yielded to the template.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"baseState"},{"title":"private","description":null}]},{"description":"This is a Yup option that gets passed to the schema's validate method, which will fail validation\non its first invalid check.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"abortEarly"},{"title":"defaultValue","description":"false"}]},{"description":"These are the default validation messages set by the Ember Yup library.\nLeave the properties `undefined` to allow defaults to be set by Yup.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"defaultValidationMessages"},{"title":"private","description":null}]},{"description":"Mark the schema as required. All field values apart from `undefined` and `null` meet this requirement.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"required"},{"title":"defaultValue","description":"false"}]},{"description":"Set messages on this hash to override the default validation messages.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"validationMessages"}]},{"description":"The validation result of the latest computed `value`.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Promise"},"name":"validation"},{"title":"private","description":null}]},{"description":"Flag `true` if there are 1 or more errors.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"hasErrors"},{"title":"yielded","description":null}]},{"description":"Flag `true` if component ran validation.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"didValidate"},{"title":"yielded","description":null}]},{"description":"Flag `true` if onBlur action was called.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"didBlur"},{"title":"yielded","description":null}]},{"description":"Array that holds the ValidationErrors emitted by the schema.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Array"},"name":"errors"},{"title":"private","description":null}]},{"description":"Array that proxies the messages from field's `errors`.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Array"},"name":"errorMessages"},{"title":"yielded","description":null},{"title":"state","description":null}]},{"description":"Flag used to determine if there was input.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"didValueUpdate"},{"title":"yielded","description":null},{"title":"defaultValue","description":"false"}]},{"description":"A field is valid if there are no errors after validating.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"isValid"},{"title":"yielded","description":null},{"title":"defaultValue","description":"false"}]},{"description":"Computed from `isValid` && `didValueUpdate`. Useful for implementing\nvalid styles after user input.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"isValidAfterUpdate"},{"title":"yielded","description":null},{"title":"defaultValue","description":"false"}]},{"description":"A field is not valid if there are errors after validating.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"isInvalid"},{"title":"yielded","description":null},{"title":"defaultValue","description":"false"}]},{"description":"Control whether or not validation occurs on the field.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"isDisabled"},{"title":"yielded","description":null}]},{"description":"Computed from `isInvalid` && `didValueUpdate`. Useful for implementing\ninvalid styles after user input.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"isInvalidAfterUpdate"},{"title":"yielded","description":null},{"title":"defaultValue","description":"false"}]},{"description":"If the field is not `disabled`, the field will validate its `value`. If the validation passes,\nthe transformed value will be passed to its `onInput` or `onClick` handlers, if defined.\nIf the validation fails, errors will get added to the `errors` property, which populates\nthe fields `errorMessages`.","tags":[{"title":"function","description":null,"name":"readValidation"},{"title":"private","description":null}]},{"description":"The immediate parent form component that houses this field. For now, the\n`validation-form` component is the only component that can house form fields.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Component"},"name":"parent"}]},{"description":"The key that's used to serialize the data value.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"String"},"name":"name"}]},{"description":"Permits Yup to transform the field's value before passing the value through.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"allowTransform"},{"title":"private","description":null,"type":null},{"title":"defaultValue","description":"false"}]},{"description":"Called when the field's value is changed. Returns the transformed data value if valid;\notherwise returns the input value.","tags":[{"title":"function","description":null,"name":"onChange"},{"title":"param","description":null,"type":{"type":"AllLiteral"},"name":"value"},{"title":"action","description":null},{"title":"yielded","description":null}]},{"description":"Clears the value and sets the field into a \"new\" state.","tags":[{"title":"function","description":null,"name":"onClear"},{"title":"action","description":null},{"title":"yielded","description":null}]},{"description":"Sets the `didBlur` state.","tags":[{"title":"function","description":null,"name":"onBlur"},{"title":"action","description":null},{"title":"yielded","description":null}]}],"number-field":[{"description":"This component wraps `Yup.number()` and validates numeric values.","tags":[{"title":"class","description":null,"type":null,"name":"NumberField"}]},{"description":"The value of the field.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Number"},"name":"value"}]},{"description":"Permits Yup to transform the field's value before passing the value through.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"allowTransform"},{"title":"private","description":null,"type":null},{"title":"defaultValue","description":"true"}]},{"description":"These are the default validation messages set by the Ember Yup library.\nLeave the properties `undefined` to allow defaults to be set by Yup.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"defaultValidationMessages"},{"title":"private","description":null}]},{"description":"Validates that field value is an integer.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"integer"}]},{"description":"Validates that field value is positive.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"positive"}]},{"description":"Validates that field value is negative.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"negative"}]},{"description":"Set the minimum allowed value for the field.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Number"},"name":"min"}]},{"description":"Set the maximum allowed value for the field.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Number"},"name":"max"}]},{"description":"Set a value that the field value should be less than.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Number"},"name":"lt"}]},{"description":"Set a value that the field value should be greater than.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Number"},"name":"gt"}]},{"description":"The primary schema that determines the fields validity.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"dataSchema"},{"title":"private","description":null}]}],"text-field":[{"description":"This component wraps `Yup.string()` and validates string values.","tags":[{"title":"class","description":null,"type":null,"name":"TextField"}]},{"description":"The value of the field.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"String"},"name":"value"}]},{"description":"Specify a regex to match the field. Since this is within a template, only\nthe String form of the regex is permitted. ex. \"^\\d{5}$\"","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"String"},"name":"matches"}]},{"description":"Set a minimum length limit for the string value.\nThe `${min}` interpolation can be used in the message.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Number"},"name":"min"}]},{"description":"Set a maximum length limit for the string value.\nThe `${max}` interpolation can be used in the message.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Number"},"name":"max"}]},{"description":"These are the default validation messages set by the Ember Yup library.\nLeave the properties `undefined` to allow defaults to be set by Yup.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"defaultValidationMessages"},{"title":"private","description":null}]},{"description":"The validation subtype.","tags":[{"title":"property","description":"string|email|url","type":{"type":"NameExpression","name":"Enum"},"name":"type"},{"title":"defaultValue","description":"string"}]},{"description":"The primary schema that determines the fields validity.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"dataSchema"},{"title":"private","description":null}]},{"description":"A yielded property the contains the number of max allowable characters for the\nlength of the `value`.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Number"},"name":"maxCharRemaining"},{"title":"yielded","description":null}]},{"description":"A yielded property the contains the number of min allowable characters for the\nlength of the `value`.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Number"},"name":"minCharRemaining"},{"title":"yielded","description":null}]}],"validation-form":[{"description":"A ValidationForm is a container for FormField components. By default, validations\nare async and its fields validations are collected during the form's submission\nprocess, invoking `onSubmit` with a hash of its fields validations.","tags":[{"title":"class","description":null,"type":null,"name":"ValidationForm"}]},{"description":"Sync forms perform additional logic to gather form data or collect errors.\nAfter `onSubmit` is invoked and the validations resolve, either `onSuccess`\nor `onReject` is invoked with a hash of data or errors. Set this value to `false`\nif you want to disable the `onSuccess` and `onReject` handlers.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"async"},{"title":"defaultValue","description":"async"}]},{"description":"FormFields register themselves with this property when they initialize.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Array"},"name":"formFields"},{"title":"private","description":null}]},{"description":"FormField errors are proxied to this property.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Array"},"name":"formFields"},{"title":"yielded","description":null}]},{"description":"A hashed collection of its FormFields validations, keyed by the fields'\n`name`.","tags":[]},{"description":"This method is invoked when the form submits, providing a hash of its fields'\nvalidations.","tags":[{"title":"function","description":null,"name":"onSubmit"},{"title":"param","description":"hash of the form fields' validations keyed by the fields' `name`","type":{"type":"NameExpression","name":"Object"},"name":"validations"},{"title":"action","description":null}]},{"description":"This flag holds the status of whether the form submitted, whether it was successful or not.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"didSubmit"},{"title":"defaultValue","description":"false"},{"title":"yielded","description":null}]},{"description":"This flag holds the status of whether or not the form has enabled its fields.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"didEnableFields"},{"title":"defaultValue","description":"false"},{"title":"private","description":null}]},{"description":"This flag holds the status of whether or not the form is validating or not.\nThis property is only for sync forms.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"isValidating"},{"title":"defaultValue","description":"false"},{"title":"sync","description":null},{"title":"yielded","description":null}]},{"description":"This flag holds the status of whether or not the form successfully validated.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"didSucceed"},{"title":"defaultValue","description":"false"},{"title":"sync","description":null},{"title":"yielded","description":null}]},{"description":"This flag holds the status of whether or not the form unsuccessfully validated.","tags":[{"title":"property","description":null,"type":{"type":"NameExpression","name":"Boolean"},"name":"didReject"},{"title":"defaultValue","description":"false"},{"title":"sync","description":null},{"title":"yielded","description":null}]},{"description":"This method is invoked after the form has successfully validated, returning\na hash of the form fields' transformed data.","tags":[{"title":"function","description":null,"name":"onSuccess"},{"title":"param","description":"hash of the fields' data keyed by the fields' `name`","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"action","description":null}]},{"description":"This method is invoked after the form has unsuccessfully validated, returning\na hash of hte form fields' ValidationErrors.","tags":[{"title":"function","description":null,"name":"onReject"},{"title":"param","description":"hash of the fields' validationErrors keyed by the fields' `name`","type":{"type":"NameExpression","name":"Object"},"name":"validationErrors"},{"title":"action","description":null}]},{"description":"This method handles the form's submission process.","tags":[{"title":"function","description":null,"name":"submit"},{"title":"private","description":null}]}],"validate-mixin":[{"description":"This mixin allows the model to validate values against its schema.","tags":[{"title":"class","description":null,"type":null,"name":"ValidateModelMixin"}]},{"description":"Parses validation options and applies them to the schema.","tags":[{"title":"function","description":null,"name":"_buildSchema"},{"title":"private","description":null}]},{"description":"A `yup` schema.","tags":[]},{"description":"Flag to tell whether or not the model is currently validating.","tags":[]},{"description":"Flag to tell whether or not the model has field errors.","tags":[]},{"description":"Validate the record's values against the schema.","tags":[{"title":"function","description":null,"name":"validate"},{"title":"param","description":"Options to pass to the schema's `validate` method","type":{"type":"NameExpression","name":"Object"},"name":"options"},{"title":"param","description":"The values to validate against; defaults to `this.toJSON()`","type":{"type":"NameExpression","name":"Object"},"name":"values"}]},{"description":"Same as validate, except synchronous.\nValidate the record's values against the schema.","tags":[{"title":"function","description":null,"name":"validateSync"},{"title":"param","description":"Options to pass to the schema's `validate` method","type":{"type":"NameExpression","name":"Object"},"name":"options"},{"title":"param","description":"The values to validate against; defaults to `this.toJSON()`","type":{"type":"NameExpression","name":"Object"},"name":"values"}]},{"description":"Adds a `validate` option to `save()`.\nThis ensures that only valid data is saved.","tags":[{"title":"function","description":null,"name":"save"},{"title":"param","description":"`validate` option ensures only valid values are saved","type":{"type":"NameExpression","name":"Object"},"name":"options"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Promise"}}]}]}